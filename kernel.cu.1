#include <stdio.h>
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <cuda.h>
#include <stdint.h>

//#include <stdlib.h>

//#include <string.h>
//#include <time.h>
//#include <memory.h>
//#include <assert.h>

unsigned int PERF_BLOCKS = 1024;
unsigned int PERF_THREADS = 256;

//#include "ed25519.cuh"
#include "ge.cuh"
#include "sc.cuh"
//#include "onion.cuh"

__global__ void ed25519_test (int i) {

    i = 0;
    ge_p3 A;
    
    unsigned char public_key[32];
    unsigned char private_key[64] = { 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17 };
    //unsigned char private_key[64] = "01234567890123456789012345678901";
    //unsigned char private_key[64] = {0};
    //printf("\n ED25519 TEST\n");

    printf("PVK ORIG: %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\n",
        private_key[0], private_key[1], private_key[2], private_key[3], private_key[4], private_key[5], private_key[6], private_key[7],
        private_key[8], private_key[9], private_key[10], private_key[11], private_key[12], private_key[13], private_key[14], private_key[15],
        private_key[16], private_key[17], private_key[18], private_key[19], private_key[20], private_key[21], private_key[22], private_key[23],
        private_key[24], private_key[25], private_key[26], private_key[27], private_key[28], private_key[29], private_key[30], private_key[31]);

    private_key[0] &= 248;
    private_key[31] &= 63;
    private_key[31] |= 64;

    printf("PVK Clamping: %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\n",
        private_key[0], private_key[1], private_key[2], private_key[3], private_key[4], private_key[5], private_key[6], private_key[7],
        private_key[8], private_key[9], private_key[10], private_key[11], private_key[12], private_key[13], private_key[14], private_key[15],
        private_key[16], private_key[17], private_key[18], private_key[19], private_key[20], private_key[21], private_key[22], private_key[23],
        private_key[24], private_key[25], private_key[26], private_key[27], private_key[28], private_key[29], private_key[30], private_key[31]);

    ge_scalarmult_base(&A, private_key);
    ge_p3_tobytes(public_key, &A);

    printf("PUB ED: %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\n",
        public_key[0], public_key[1], public_key[2], public_key[3], public_key[4], public_key[5], public_key[6], public_key[7],
        public_key[8], public_key[9], public_key[10], public_key[11], public_key[12], public_key[13], public_key[14], public_key[15],
        public_key[16], public_key[17], public_key[18], public_key[19], public_key[20], public_key[21], public_key[22], public_key[23],
        public_key[24], public_key[25], public_key[26], public_key[27], public_key[28], public_key[29], public_key[30], public_key[31]);
}

int main() {
        ed25519_test << <1, 1 >> > (1);
    //gl_u_seed << <(uint32_t)grid, (uint32_t)block, 0, dt->stream1 >> >
    return 0;
}
